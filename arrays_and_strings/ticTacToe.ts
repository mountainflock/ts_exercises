// Write a program that allows two players to play a match of tic-tac-toe.

// Display the 3×3 playing field. Use . for empty space, X for spaces occupied by Xs, and O for spaces occupied by Os.
// Ask the next player to input a row and a column. Xs go first and then alternate with Os.
// Update the playing field and check if someone won, or if there's a tie. If so, notify the players.
// Repeat steps 1–3 until the game ends.

// If you want to challenge yourself, after finishing the two-player version of tic-tac-toe,
// implement a version that allows to play against a computer opponent that employs the optimal strategy.
// Look for a description of the strategy used in Newell and Simon's 1972 tic-tac-toe.

const field = [
  [".", ".", "."],
  [".", ".", "."],
  [".", ".", "."],
];

function fieldDisplay(f: string[][]): void {
  console.log(f[0][0], f[0][1], f[0][2]);
  console.log(f[1][0], f[1][1], f[1][2]);
  console.log(f[2][0], f[2][1], f[2][2]);
}

function win(f: string[][], s: string): boolean {
  return (
    (f[0][0] == s && f[1][0] == s && f[2][0] == s) ||
    (f[0][1] == s && f[1][1] == s && f[2][1] == s) ||
    (f[0][2] == s && f[1][2] == s && f[2][2] == s) ||
    (f[0][0] == s && f[0][1] == s && f[0][2] == s) ||
    (f[1][0] == s && f[1][1] == s && f[1][2] == s) ||
    (f[2][0] == s && f[2][1] == s && f[2][2] == s) ||
    (f[0][0] == s && f[1][1] == s && f[2][2] == s) ||
    (f[0][2] == s && f[1][1] == s && f[2][0] == s)
  );
}

function pick(f: string[][]): [number, number] {
  let row: number;
  let column: number;
  while (true) {
    row = parseInt(prompt("Choose row:")!);
    while (row != 1 && row != 2 && row != 3) {
      console.log("That is not a valid row!");
      row = parseInt(prompt("Choose row:")!);
    }
    column = parseInt(prompt("Choose column:")!);
    while (column != 1 && column != 2 && column != 3) {
      console.log("That is not a valid column!");
      column = parseInt(prompt("Choose column:")!);
    }
    if (f[row - 1][column - 1] == ".") {
      break;
    } else {
      console.log("This space is occupied!");
    }
  }
  return [row - 1, column - 1];
}

function tie(f: string[][]): boolean {
  if (!f.join().includes(".") && !win(f, "X") && !win(f, "O")) {
    return true;
  } else {
    return false;
  }
}

function autoTurn(f: string[][]): [number, number] {
  //1. win
  if (
    ((f[1][0] == "O" && f[2][0] == "O") ||
      (f[1][1] == "O" && f[2][2] == "O") ||
      (f[0][1] == "O" && f[0][2] == "O")) &&
    f[0][0] == "."
  ) {
    return [0, 0];
  }
  if (
    ((f[1][1] == "O" && f[2][1] == "O") ||
      (f[0][0] == "O" && f[0][2] == "O")) &&
    f[0][1] == "."
  ) {
    return [0, 1];
  }
  if (
    ((f[1][2] == "O" && f[2][2] == "O") ||
      (f[1][1] == "O" && f[2][0] == "O") ||
      (f[0][0] == "O" && f[0][1] == "O")) &&
    f[0][2] == "."
  ) {
    return [0, 2];
  }
  if (
    ((f[1][1] == "O" && f[1][2] == "O") ||
      (f[0][0] == "O" && f[2][0] == "O")) &&
    f[1][0] == "."
  ) {
    return [1, 0];
  }
  if (
    ((f[0][2] == "O" && f[2][0] == "O") ||
      (f[1][0] == "O" && f[1][2] == "O") ||
      (f[0][0] == "O" && f[2][2] == "O") ||
      (f[0][1] == "O" && f[2][1] == "O")) &&
    f[1][1] == "."
  ) {
    return [1, 1];
  }
  if (
    ((f[0][2] == "O" && f[2][2] == "O") ||
      (f[1][0] == "O" && f[1][1] == "O")) &&
    f[1][2] == "."
  ) {
    return [1, 2];
  }
  if (
    ((f[0][0] == "O" && f[1][0] == "O") ||
      (f[2][1] == "O" && f[2][2] == "O") ||
      (f[1][1] == "O" && f[0][2] == "O")) &&
    f[2][0] == "."
  ) {
    return [2, 0];
  }
  if (
    ((f[0][1] == "O" && f[2][0] == "O") ||
      (f[2][0] == "O" && f[2][2] == "O")) &&
    f[2][1] == "."
  ) {
    return [2, 1];
  }
  if (
    ((f[2][0] == "O" && f[2][1] == "O") ||
      (f[0][2] == "O" && f[1][2] == "O") ||
      (f[1][1] == "O" && f[0][0] == "O")) &&
    f[2][2] == "."
  ) {
    return [2, 2];
  }

  //2. block
  if (
    ((f[1][0] == "X" && f[2][0] == "X") ||
      (f[1][1] == "X" && f[2][2] == "X") ||
      (f[0][1] == "X" && f[0][2] == "X")) &&
    f[0][0] == "."
  ) {
    return [0, 0];
  }
  if (
    ((f[1][1] == "X" && f[2][1] == "X") ||
      (f[0][0] == "X" && f[0][2] == "X")) &&
    f[0][1] == "."
  ) {
    return [0, 1];
  }
  if (
    ((f[1][2] == "X" && f[2][2] == "X") ||
      (f[1][1] == "X" && f[2][0] == "X") ||
      (f[0][0] == "X" && f[0][1] == "X")) &&
    f[0][2] == "."
  ) {
    return [0, 2];
  }
  if (
    ((f[1][1] == "X" && f[1][2] == "X") ||
      (f[0][0] == "X" && f[2][0] == "X")) &&
    f[1][0] == "."
  ) {
    return [1, 0];
  }
  if (
    ((f[0][2] == "X" && f[2][0] == "X") ||
      (f[1][0] == "X" && f[1][2] == "X") ||
      (f[0][0] == "X" && f[2][2] == "X") ||
      (f[0][1] == "X" && f[2][1] == "X")) &&
    f[1][1] == "."
  ) {
    return [1, 1];
  }
  if (
    ((f[0][2] == "X" && f[2][2] == "X") ||
      (f[1][0] == "X" && f[1][1] == "X")) &&
    f[1][2] == "."
  ) {
    return [1, 2];
  }
  if (
    ((f[0][0] == "X" && f[1][0] == "X") ||
      (f[2][1] == "X" && f[2][2] == "X") ||
      (f[1][1] == "X" && f[0][2] == "X")) &&
    f[2][0] == "."
  ) {
    return [2, 0];
  }
  if (
    ((f[0][1] == "X" && f[1][1] == "X") ||
      (f[2][0] == "X" && f[2][2] == "X")) &&
    f[2][1] == "."
  ) {
    return [2, 1];
  }
  if (
    ((f[2][0] == "X" && f[2][1] == "X") ||
      (f[0][2] == "X" && f[1][2] == "X") ||
      (f[1][1] == "X" && f[0][0] == "X")) &&
    f[2][2] == "."
  ) {
    return [2, 2];
  }

  //3. fork
  if (
    ((f[0][1] == "O" && f[1][0] == "O" && f[0][2] == "." && f[2][0] == ".") ||
      (f[0][1] == "O" && f[2][0] == "O" && f[1][0] == "." && f[0][2] == ".") ||
      (f[0][2] == "O" && f[1][0] == "O" && f[0][1] == "." && f[2][0] == ".") ||
      (f[0][1] == "O" && f[2][2] == "O" && f[0][2] == "." && f[1][1] == ".")) &&
    f[0][0] == "."
  ) {
    return [0, 0];
  }

  if (
    ((f[0][2] == "O" && f[2][1] == "O" && f[0][0] == "." && f[1][1] == ".") ||
      (f[0][0] == "O" && f[2][1] == "O" && f[0][2] == "." && f[1][1] == ".")) &&
    f[0][1] == "."
  ) {
    return [0, 1];
  }

  if (
    ((f[0][1] == "O" && f[1][2] == "O" && f[0][0] == "." && f[2][2] == ".") ||
      (f[0][1] == "O" && f[2][2] == "O" && f[0][0] == "." && f[1][2] == ".") ||
      (f[0][0] == "O" && f[1][2] == "O" && f[0][1] == "." && f[2][2] == ".") ||
      (f[0][1] == "O" && f[2][0] == "O" && f[0][0] == "." && f[1][1] == ".")) &&
    f[0][2] == "."
  ) {
    return [0, 2];
  }

  if (
    ((f[0][0] == "O" && f[1][2] == "O" && f[1][1] == "." && f[2][0] == ".") ||
      (f[2][0] == "O" && f[1][2] == "O" && f[0][0] == "." && f[1][1] == ".")) &&
    f[1][0] == "."
  ) {
    return [1, 0];
  }

  if (
    ((f[1][0] == "O" && f[2][1] == "O" && f[0][1] == "." && f[1][2] == ".") ||
      (f[1][2] == "O" && f[2][1] == "O" && f[0][1] == "." && f[1][0] == ".") ||
      (f[0][1] == "O" && f[1][0] == "O" && f[1][1] == "." && f[2][1] == ".") ||
      (f[0][1] == "O" && f[1][2] == "O" && f[1][0] == "." && f[2][1] == ".")) &&
    f[1][1] == "."
  ) {
    return [1, 1];
  }
  if (
    ((f[0][2] == "O" && f[1][0] == "O" && f[1][1] == "." && f[2][2] == ".") ||
      (f[1][0] == "O" && f[2][2] == "O" && f[1][1] == "." && f[0][2] == ".")) &&
    f[1][2] == "."
  ) {
    return [1, 2];
  }
  if (
    ((f[1][0] == "O" && f[2][1] == "O" && f[2][2] == "." && f[0][0] == ".") ||
      (f[0][0] == "O" && f[2][1] == "O" && f[1][0] == "." && f[2][2] == ".") ||
      (f[2][1] == "O" && f[0][2] == "O" && f[1][1] == "." && f[2][2] == ".") ||
      (f[1][0] == "O" && f[2][2] == "O" && f[0][0] == "." && f[2][1] == ".")) &&
    f[2][0] == "."
  ) {
    return [2, 0];
  }

  if (
    ((f[0][1] == "O" && f[2][2] == "O" && f[1][1] == "." && f[2][0] == ".") ||
      (f[0][1] == "O" && f[2][0] == "O" && f[1][1] == "." && f[2][2] == ".")) &&
    f[2][1] == "."
  ) {
    return [2, 1];
  }

  if (
    ((f[1][2] == "O" && f[2][1] == "O" && f[0][2] == "." && f[2][0] == ".") ||
      (f[1][2] == "O" && f[2][0] == "O" && f[0][2] == "." && f[2][1] == ".") ||
      (f[0][2] == "O" && f[2][1] == "O" && f[2][0] == "." && f[1][2] == ".") ||
      (f[2][1] == "O" && f[0][0] == "O" && f[1][1] == "." && f[2][0] == ".")) &&
    f[2][2] == "."
  ) {
    return [2, 2];
  }

  //4. blocking an opponent's fork
  if (
    ((f[0][1] == "X" && f[1][0] == "X" && f[0][2] == "." && f[2][0] == ".") ||
      (f[0][1] == "X" && f[2][0] == "X" && f[1][0] == "." && f[0][2] == ".") ||
      (f[0][2] == "X" && f[1][0] == "X" && f[0][1] == "." && f[2][0] == ".") ||
      (f[0][1] == "X" && f[2][2] == "X" && f[0][2] == "." && f[1][1] == ".")) &&
    f[0][0] == "."
  ) {
    return [0, 0];
  }

  if (
    ((f[0][2] == "X" && f[2][1] == "X" && f[0][0] == "." && f[1][1] == ".") ||
      (f[0][0] == "X" && f[2][1] == "X" && f[0][2] == "." && f[1][1] == ".")) &&
    f[0][1] == "."
  ) {
    return [0, 1];
  }

  if (
    ((f[0][1] == "X" && f[1][2] == "X" && f[0][0] == "." && f[2][2] == ".") ||
      (f[0][1] == "X" && f[2][2] == "X" && f[0][0] == "." && f[1][2] == ".") ||
      (f[0][0] == "X" && f[1][2] == "X" && f[0][1] == "." && f[2][2] == ".") ||
      (f[0][1] == "X" && f[2][0] == "X" && f[0][0] == "." && f[1][1] == ".")) &&
    f[0][2] == "."
  ) {
    return [0, 2];
  }

  if (
    ((f[0][0] == "X" && f[1][2] == "X" && f[1][1] == "." && f[2][0] == ".") ||
      (f[2][0] == "X" && f[1][2] == "X" && f[0][0] == "." && f[1][1] == ".")) &&
    f[1][0] == "."
  ) {
    return [1, 0];
  }

  if (
    ((f[1][0] == "X" && f[2][1] == "X" && f[0][1] == "." && f[1][2] == ".") ||
      (f[1][2] == "X" && f[2][1] == "X" && f[0][1] == "." && f[1][0] == ".") ||
      (f[0][1] == "X" && f[1][0] == "X" && f[1][1] == "." && f[2][1] == ".") ||
      (f[0][1] == "X" && f[1][2] == "X" && f[1][0] == "." && f[2][1] == ".")) &&
    f[1][1] == "."
  ) {
    return [1, 1];
  }
  if (
    ((f[0][2] == "X" && f[1][0] == "X" && f[1][1] == "." && f[2][2] == ".") ||
      (f[1][0] == "X" && f[2][2] == "X" && f[1][1] == "." && f[0][2] == ".")) &&
    f[1][2] == "."
  ) {
    return [1, 2];
  }
  if (
    ((f[1][0] == "X" && f[2][1] == "X" && f[2][2] == "." && f[0][0] == ".") ||
      (f[0][0] == "X" && f[2][1] == "X" && f[1][0] == "." && f[2][2] == ".") ||
      (f[1][0] == "X" && f[2][2] == "X" && f[0][0] == "." && f[2][1] == ".")) &&
    f[2][0] == "."
  ) {
    return [2, 0];
  }

  if (
    ((f[0][1] == "X" && f[2][2] == "X" && f[1][1] == "." && f[2][0] == ".") ||
      (f[0][1] == "X" && f[2][0] == "X" && f[1][1] == "." && f[2][2] == ".")) &&
    f[2][1] == "."
  ) {
    return [2, 1];
  }

  if (
    ((f[1][2] == "X" && f[2][1] == "X" && f[0][2] == "." && f[2][0] == ".") ||
      (f[1][2] == "X" && f[2][0] == "X" && f[0][2] == "." && f[2][1] == ".") ||
      (f[0][2] == "X" && f[2][1] == "X" && f[2][0] == "." && f[1][2] == ".") ||
      (f[2][1] == "X" && f[0][2] == "X" && f[1][1] == "." && f[2][2] == ".") ||
      (f[2][1] == "X" && f[0][0] == "X" && f[1][1] == "." && f[2][0] == ".")) &&
    f[2][2] == "."
  ) {
    return [2, 2];
  }

  //5. center
  if (f[1][1] == ".") {
    return [1, 1];
  }

  //6. opposite corner
  if (f[0][0] == "X" && f[2][2] == ".") {
    return [2, 2];
  }
  if (f[0][2] == "X" && f[2][0] == ".") {
    return [2, 0];
  }
  if (f[2][0] == "X" && f[0][2] == ".") {
    return [0, 2];
  }
  if (f[2][2] == "X" && f[0][0] == ".") {
    return [0, 0];
  }

  // 7. empty corner
  if (f[0][0] == ".") {
    return [0, 0];
  }
  if (f[0][2] == ".") {
    return [0, 2];
  }
  if (f[2][0] == ".") {
    return [2, 0];
  }
  if (f[2][2] == ".") {
    return [2, 2];
  }

  // 8. empty side
  if (f[0][1] == ".") {
    return [0, 1];
  }
  if (f[1][0] == ".") {
    return [1, 0];
  }
  if (f[1][2] == ".") {
    return [1, 2];
  } else {
    return [2, 1];
  }
}

function turn(f: string[][]): boolean {
  const [r, c] = pick(f);
  f[r][c] = "X";
  console.log();
  fieldDisplay(f);
  console.log();

  if (tie(f)) {
    console.log("It's a tie!");
    return true;
  }
  if (win(f, "X")) {
    console.log(`Xs win!`);
    return true;
  }

  const [rA, cA] = autoTurn(f);
  f[rA][cA] = "O";
  console.log();
  fieldDisplay(f);
  console.log();

  if (tie(f)) {
    console.log("It's a tie!");
    return true;
  }
  if (win(f, "O")) {
    console.log("Os win!");
    return true;
  }
  return false;
}

fieldDisplay(field);
console.log();

while (true) {
  if (turn(field)) {
    break;
  }
}
